@c key actions
@c ./../src/action.c 202

Many actions take a @code{delta} parameter as the last parameter,
which is an amount to change something.  That @code{delta} may include
units, as an additional parameter, such as @code{Action(Object,5,mm)}.
If no units are specified, the default is PCB's native units
(currently 1/100 mil).  Also, if the delta is prefixed by @code{+} or
@code{-}, the size is increased or decreased by that amount.
Otherwise, the size size is set to the given amount.

@example
Action(Object,5,mil)
Action(Object,+0.5,mm)
Action(Object,-1)
@end example

Actions which take a @code{delta} parameter which do not accept all
these options will specify what they do take.

@c ./../src/action.c 206

@macro pinshapes

Pins, pads, and vias can have various shapes.  All may be round.  Pins
and pads may be square (obviously "square" pads are usually
rectangular).  Pins and vias may be octagonal.  When you change a
shape flag of an element, you actually change all of its pins and
pads.

Note that the square flag takes precedence over the octagon flag,
thus, if both the square and octagon flags are set, the object is
square.  When the square flag is cleared, the pins and pads will be
either round or, if the octagon flag is set, octagonal.

@end macro

@c ./../src/command.c 64

@macro colonaction

This is one of the command box helper actions.  While it is a regular
action and can be used like any other action, its name and syntax are
optimized for use with the command box (@code{:}) and thus the syntax
is documented for that purpose.

@end macro

@c ./../src/action.c 204

Many actions act on indicated objects on the board.  They will have
parameters like @code{ToggleObject} or @code{SelectedVias} to indicate
what group of objects they act on.  Unless otherwise specified, these
parameters are defined as follows:

@table @code

@item Object
@itemx ToggleObject
Affects the object under the mouse pointer.  If this action is invoked
from a menu or script, the user will be prompted to click on an
object, which is then the object affected.

@item Selected
@itemx SelectedObjects

Affects all objects which are currently selected.  At least, all
selected objects for which the given action makes sense.

@item SelectedPins
@itemx SelectedVias
@itemx Selected@var{Type}
@itemx @i{etc}
Affects all objects which are both selected and of the @var{Type} specified.

@end table


@menu
* core actions::
* common actions::
* gtk actions::
* lesstif actions::
@end menu

@node core actions
@section Core actions
@menu
* AddRats Action:: Add one or more rat lines to the board.
* ApplyVendor Action:: Applies the currently loaded vendor drill table to the current design.
* Atomic Action:: Save or restore the undo serial number.
* AutoPlaceSelected Action:: Auto-place selected components.
* AutoRoute Action:: Auto-route some or all rat lines.
* ChangeClearSize Action:: Changes the clearance size of objects.
* ChangeDrillSize Action:: Changes the drilling hole size of objects.
* ChangeFlag Action:: Sets or clears flags on objects.
* ChangeHole Action:: Changes the hole flag of objects.
* ChangeJoin Action:: Changes the join (clearance through polygons) of objects.
* ChangeName Action:: Sets the name of objects.
* ChangeOctagon Action:: Changes the octagon-flag of pins and vias.
* ChangePinName Action:: Sets the name of a specific pin on a specific element.
* ChangeSize Action:: Changes the size of objects.
* ChangeSquare Action:: Changes the square flag of pins and pads.
* ClearOctagon Action:: Clears the octagon-flag of pins and vias.
* ClearSquare Action:: Clears the square-flag of pins and pads.
* ClearThermal Action:: Clear a thermal (on the current layer) to pins or vias.
* ClrFlag Action:: Clears flags on objects.
* Connection Action:: Searches connections of the object at the cursor position.
* DeleteRats Action:: Delete rat lines.
* DisableVendor Action:: Disables automatic drill size mapping.
* DisperseElements Action:: Disperses elements.
* Display Action:: Several display-related actions.
* djopt Action:: Perform various optimizations on the current board
* DRC Action:: Invoke the DRC check.
* DumpLibrary Action:: Display the entire contents of the libraries.
* EnableVendor Action:: Enables automatic drill size mapping.
* ExecuteFile Action:: Run actions from the given file.
* Flip Action:: Flip an element to the opposite side of the board.
* h Action:: Print a help message for commands.
* l Action:: Loads layout data.
* le Action:: Loads an element into the current buffer.
* LoadFrom Action:: Load layout data from a file.
* LoadVendorFrom Action:: Loads the specified vendor resource file.
* m Action:: Loads a layout into the current buffer.
* MarkCrosshair Action:: Set/Reset the Crosshair mark
* Mode Action:: Change or use the tool mode.
* MoveObject Action:: Moves the object under the crosshair.
* MoveToCurrentLayer Action:: Moves objects to the current layer.
* Netlist Action:: Perform various actions on netlists.
* New Action:: Starts a new layout.
* OptAutoOnly Action:: Toggles the optimize-only-autorouted flag.
* PasteBuffer Action:: Various operations on the paste buffer.
* Polygon Action:: Some polygon related stuff.
* Puller Action:: Pull an arc-line junction tight.
* q Action:: Quits the application after confirming.
* q! Action:: Quits the application without confirming.
* Quit Action:: Quits the application.
* Redo Action:: Redo recent``undo''operations.
* RemoveSelected Action:: Removes any selected objects.
* Report Action:: Produce various report.
* ReportDialog Action:: Report on the object under the crosshair
* RipUp Action:: Ripup auto-routed tracks, or convert an element to parts.
* rn Action:: Reads netlist.
* RouteStyle Action:: Copies the indicated routing style into the current sizes.
* s Action:: Saves layout data.
* SaveTo Action:: Saves data to a file.
* Select Action:: Toggles or sets the selection
* SetFlag Action:: Sets flags on objects.
* SetOctagon Action:: Sets the octagon-flag of objects.
* SetSame Action:: Sets current layer and sizes to match indicated item.
* SetSquare Action:: sets the square-flag of objects.
* SetThermal Action:: Set a thermal (on the current layer) to pins or vias.
* SetValue Action:: Change various board-wide values and sizes.
* ToggleHideName Action:: Toggles the visibility of element names.
* ToggleThermal Action:: Toggle a thermal (on the current layer) to pins or vias.
* ToggleVendor Action:: Toggles the state of automatic drill size mapping.
* Undo Action:: Undo recent changes.
* UnloadVendor Action:: Unloads the current vendor drill mapping table.
* Unselect Action:: unselects the object at the pointer location or the specified objects
* w Action:: Saves layout data.
* wq Action:: Saves the layout data and quits.
@end menu
@node AddRats Action
@subsection AddRats
@c key AddRats in hid 
@cartouche
@format
AddRats(AllRats|SelectedRats|Close)@end format
@end cartouche

Add one or more rat lines to the board.
@c ./../src/action.c 2815

@table @code

@item AllRats
Create rat lines for all loaded nets that aren't already connected on
with copper.

@item SelectedRats
Similarly, but only add rat lines for nets connected to selected pins
and pads.

@item Close
Selects the shortest unselected rat on the board.

@end table


@node ApplyVendor Action
@subsection ApplyVendor
@c key ApplyVendor in hid 
@cartouche
@format
ApplyVendor()@end format
@end cartouche

Applies the currently loaded vendor drill table to the current design.
@c ./../src/vendor.c 109
@cindex vendor map 
@cindex vendor drill table
@findex ApplyVendor()

This will modify all of your drill holes to match the list of allowed
sizes for your vendor.

@node Atomic Action
@subsection Atomic
@c key Atomic in hid 
@cartouche
@format
Atomic(Save|Restore|Close|Block)@end format
@end cartouche

Save or restore the undo serial number.
@c ./../src/action.c 1508

This action allows making multiple-action bindings into an atomic
operation that will be undone by a single Undo command.  For example,
to optimize rat lines, you'd delete the rats and re-add them.  To
group these into a single undo, you'd want the deletions and the
additions to have the same undo serial number.  So, you @code{Save},
delete the rats, @code{Restore}, add the rats - using the same serial
number as the deletes, then @code{Block}, which checks to see if the
deletions or additions actually did anything.  If not, the serial
number is set to the saved number, as there's nothing to undo.  If
something did happen, the serial number is incremented so that these
actions are counted as a single undo step.

@table @code

@item Save
Saves the undo serial number.

@item Restore
Returns it to the last saved number.

@item Close
Sets it to 1 greater than the last save.

@item Block
Does a Restore if there was nothing to undo, else does a Close.

@end table


@node AutoPlaceSelected Action
@subsection AutoPlaceSelected
@c key AutoPlaceSelected in hid 
@cartouche
@format
AutoPlaceSelected()@end format
@end cartouche

Auto-place selected components.
@c ./../src/action.c 2909

Attempts to re-arrange the selected components such that the nets
connecting them are minimized.  Note that you cannot undo this.


@node AutoRoute Action
@subsection AutoRoute
@c key AutoRoute in hid 
@cartouche
@format
AutoRoute(AllRats|SelectedRats)@end format
@end cartouche

Auto-route some or all rat lines.
@c ./../src/action.c 2931

@table @code

@item AllRats
Attempt to autoroute all rats.

@item SelectedRats
Attempt to autoroute the selected rats.

@end table

Before autorouting, it's important to set up a few things.  First,
make sure any layers you aren't using are disabled, else the
autorouter may use them.  Next, make sure the current line and via
styles are set accordingly.  Last, make sure "new lines clear
polygons" is set, in case you eventually want to add a copper pour.

Autorouting takes a while.  During this time, the program may not be
responsive.


@node ChangeClearSize Action
@subsection ChangeClearSize
@c key ChangeClearSize in hid 
@cartouche
@format
ChangeClearSize(Object, delta)
ChangeClearSize(SelectedPins|SelectedPads|SelectedVias, delta)
ChangeClearSize(SelectedLines|SelectedArcs, delta
ChangeClearSize(Selected|SelectedObjects, delta)@end format
@end cartouche

Changes the clearance size of objects.
@c ./../src/action.c 3148

If the solder mask is currently showing, this action changes the
solder mask clearance.  If the mask is not showing, this action
changes the polygon clearance.


@node ChangeDrillSize Action
@subsection ChangeDrillSize
@c key ChangeDrillSize in hid 
@cartouche
@format
ChangeDrillSize(Object, delta)
ChangeDrillSize(SelectedPins|SelectedVias|Selected|SelectedObjects, delta)@end format
@end cartouche

Changes the drilling hole size of objects.
@c ./../src/action.c 3090


@node ChangeFlag Action
@subsection ChangeFlag
@c key ChangeFlag in hid 
@cartouche
@format
ChangeFlag(Object|Selected|SelectedObjects, flag, value)
ChangeFlag(SelectedLines|SelectedPins|SelectedVias, flag, value)
ChangeFlag(SelectedPads|SelectedTexts|SelectedNames, flag, value)
ChangeFlag(SelectedElements, flag, value)
flag = square | octagon | thermal | join
value = 0 | 1@end format
@end cartouche

Sets or clears flags on objects.
@c ./../src/action.c 5038

Toggles the given flag on the indicated object(s).  The flag may be
one of the flags listed above (square, octagon, thermal, join).  The
value may be the number 0 or 1.  If the value is 0, the flag is
cleared.  If the value is 1, the flag is set.


@node ChangeHole Action
@subsection ChangeHole
@c key ChangeHole in hid 
@cartouche
@format
ChangeHole(ToggleObject|Object|SelectedVias|Selected)@end format
@end cartouche

Changes the hole flag of objects.
@c ./../src/action.c 3827

The "hole flag" of a via determines whether the via is a
plated-through hole (not set), or an unplated hole (set).


@node ChangeJoin Action
@subsection ChangeJoin
@c key ChangeJoin in hid 
@cartouche
@format
ChangeJoin(ToggleObject|SelectedLines|SelectedArcs|Selected)@end format
@end cartouche

Changes the join (clearance through polygons) of objects.
@c ./../src/action.c 3441

The join flag determines whether a line or arc, drawn to intersect a
polygon, electrically connects to the polygon or not.  When joined,
the line/arc is simply drawn over the polygon, making an electrical
connection.  When not joined, a gap is drawn between the line and the
polygon, insulating them from each other.


@node ChangeName Action
@subsection ChangeName
@c key ChangeName in hid 
@cartouche
@format
ChangeName(Object)
ChangeName(Layout|Layer)@end format
@end cartouche

Sets the name of objects.
@c ./../src/action.c 3292

@table @code

@item Object
Changes the name of the element under the cursor.

@item Layout
Changes the name of the layout.  This is printed on the fab drawings.

@item Layer
Changes the name of the currently active layer.

@end table


@node ChangeOctagon Action
@subsection ChangeOctagon
@c key ChangeOctagon in hid 
@cartouche
@format
ChangeOctagon(Object|ToggleObject|SelectedObjects|Selected)
ChangeOctagon(SelectedElements|SelectedPins|SelectedVias)@end format
@end cartouche

Changes the octagon-flag of pins and vias.
@c ./../src/action.c 3653

@pinshapes


@node ChangePinName Action
@subsection ChangePinName
@c key ChangePinName in hid 
@cartouche
@format
ChangePinName(ElementName,PinNumber,PinName)@end format
@end cartouche

Sets the name of a specific pin on a specific element.
@c ./../src/action.c 3216

This can be especially useful for annotating pin names from a
schematic to the layout without requiring knowledge of the pcb file
format.

@example
ChangePinName(U3, 7, VCC)
@end example


@node ChangeSize Action
@subsection ChangeSize
@c key ChangeSize in hid 
@cartouche
@format
ChangeSize(Object, delta)
ChangeSize(SelectedObjects|Selected, delta)
ChangeSize(SelectedLines|SelectedPins|SelectedVias, delta)
ChangeSize(SelectedPads|SelectedTexts|SelectedNames, delta)
ChangeSize(SelectedElements, delta)@end format
@end cartouche

Changes the size of objects.
@c ./../src/action.c 3001

For lines and arcs, this changes the width.  For pins and vias, this
changes the overall diameter of the copper annulus.  For pads, this
changes the width and, indirectly, the length.  For texts and names,
this changes the scaling factor.  For elements, this changes the width
of the silk layer lines and arcs for this element.


@node ChangeSquare Action
@subsection ChangeSquare
@c key ChangeSquare in hid 
@cartouche
@format
ChangeSquare(ToggleObject)
ChangeSquare(SelectedElements|SelectedPins)
ChangeSquare(Selected|SelectedObjects)@end format
@end cartouche

Changes the square flag of pins and pads.
@c ./../src/action.c 3494

Note that @code{Pins} means both pins and pads.

@pinshapes


@node ClearOctagon Action
@subsection ClearOctagon
@c key ClearOctagon in hid 
@cartouche
@format
ClearOctagon(ToggleObject|Object|SelectedObjects|Selected)
ClearOctagon(SelectedElements|SelectedPins|SelectedVias)@end format
@end cartouche

Clears the octagon-flag of pins and vias.
@c ./../src/action.c 3769

@pinshapes


@node ClearSquare Action
@subsection ClearSquare
@c key ClearSquare in hid 
@cartouche
@format
ClearSquare(ToggleObject|SelectedElements|SelectedPins)@end format
@end cartouche

Clears the square-flag of pins and pads.
@c ./../src/action.c 3600

Note that @code{Pins} means pins and pads.

@pinshapes


@node ClearThermal Action
@subsection ClearThermal
@c key ClearThermal in hid 
@cartouche
@format
ClearThermal(Object|SelectePins|SelectedVias|Selected|SelectedElements)@end format
@end cartouche

Clear a thermal (on the current layer) to pins or vias.
@c ./../src/action.c 1778

This removes any electrical connection.  Pins and vias that do not
already have thermals are not changed.


@node ClrFlag Action
@subsection ClrFlag
@c key ClrFlag in hid 
@cartouche
@format
ClrFlag(Object|Selected|SelectedObjects, flag)
ClrFlag(SelectedLines|SelectedPins|SelectedVias, flag)
ClrFlag(SelectedPads|SelectedTexts|SelectedNames, flag)
ClrFlag(SelectedElements, flag)
flag = square | octagon | thermal | join@end format
@end cartouche

Clears flags on objects.
@c ./../src/action.c 5021

Turns the given flag off, regardless of its previous setting.  See
@code{ChangeFlag}.

@example
ClrFlag(SelectedLines,join)
@end example


@node Connection Action
@subsection Connection
@c key Connection in hid 
@cartouche
@format
Connection(Find|ResetLinesAndPolygons|ResetPinsAndVias|Reset)@end format
@end cartouche

Searches connections of the object at the cursor position.
@c ./../src/action.c 2023

Connections found with this action will be highlighted in the
``connected-color'' color and will have the ``found'' flag set.

@table @code

@item Find
The net under the cursor is ``found''.

@item ResetLinesAndPolygons
Any ``found'' lines and polygons are marked ``not found''.

@item ResetPinsAndVias
Any ``found'' pins and vias are marked ``not found''.

@item Reset
All ``found'' objects are marked ``not found''.

@end table


@node DeleteRats Action
@subsection DeleteRats
@c key DeleteRats in hid 
@cartouche
@format
DeleteRats(AllRats|Selected|SelectedRats)@end format
@end cartouche

Delete rat lines.
@c ./../src/action.c 2877


@node DisableVendor Action
@subsection DisableVendor
@c key DisableVendor in hid 
@cartouche
@format
DisableVendor()@end format
@end cartouche

Disables automatic drill size mapping.
@c ./../src/vendor.c 157

@cindex vendor map 
@cindex vendor drill table
@findex DisableVendor()

When drill mapping is enabled, new instances of pins and vias will
have their drill holes mapped to one of the allowed drill sizes
specified in the currently loaded vendor drill table.


@node DisperseElements Action
@subsection DisperseElements
@c key DisperseElements in hid 
@cartouche
@format
DisperseElements(All|Selected)@end format
@end cartouche

Disperses elements.
@c ./../src/action.c 2069

Normally this is used when starting a board, by selecting all elements
and then dispersing them.  This scatters the elements around the board
so that you can pick individual ones, rather than have all the
elements at the same 0,0 coordinate and thus impossible to choose
from.


@node Display Action
@subsection Display
@c key Display in hid 
@cartouche
@format
Display(NameOnPCB|Description|Value)
Display(Grid|Redraw)
Display(CycleClip|Toggle45Degree|ToggleStartDirection)
Display(ToggleGrid|ToggleRubberBandMode|ToggleUniqueNames)
Display(ToggleMask|ToggleName|ToggleClearLine|ToggleSnapPin)
Display(ToggleThindraw|ToggleOrthoMove|ToggleLocalRef)
Display(ToggleCheckPlanes|ToggleShowDRC|ToggleAutoDRC)
Display(ToggleLiveRoute)
Display(Pinout|PinOrPadName)
Display(Scroll, Direction)@end format
@end cartouche

Several display-related actions.
@c ./../src/action.c 2187

@table @code

@item NameOnPCB
@item Description
@item Value
Specify whether all elements show their name, description, or value.

@item Redraw
Redraw the whole board.

@item Toggle45Degree
When clear, lines can be drawn at any angle.  When set, lines are
restricted to multiples of 45 degrees and requested lines may be
broken up according to the clip setting.

@item CycleClip
Changes the way lines are restricted to 45 degree increments.  The
varous settings are: straight only, orthogonal then angled, and angled
then orthogonal.  If AllDirections is set, this action disables it.

@item ToggleRubberBandMode
If set, moving an object moves all the lines attached to it too.

@item ToggleStartDirection
If set, each time you set a point in a line, the Clip toggles between
orth-angle and angle-ortho.

@item ToggleUniqueNames
If set, you will not be permitted to change the name of an element to
match that of another element.

@item ToggleSnapPin
If set, pin centers and pad end points are treated as additional grid
points that the cursor can snap to.

@item ToggleLocalRef
If set, the mark is automatically set to the beginning of any move, so
you can see the relative distance you've moved.

@item ToggleThindraw
If set, objects on the screen are drawn as outlines (lines are drawn
as center-lines).  This lets you see line endpoints hidden under pins,
for example.

@item ToggleShowDRC
If set, pending objects (i.e. lines you're in the process of drawing)
will be drawn with an outline showing how far away from other copper
you need to be.

@item ToggleLiveRoute
If set, the progress of the autorouter will be visible on the screen.

@item ToggleAutoDRC
If set, you will not be permitted to make connections which violate
the current DRC and netlist settings.

@item ToggleCheckPlanes
If set, lines and arcs aren't drawn, which usually leaves just the
polygons.  If you also disable all but the layer you're interested in,
this allows you to check for isolated regions.

@item ToggleOrthoMove
If set, the crosshair is only allowed to move orthogonally from its
previous position.  I.e. you can move an element or line up, down,
left, or right, but not up+left or down+right.

@item ToggleName
Selects whether the pinouts show the pin names or the pin numbers.

@item ToggleMask
Turns the solder mask on or off.

@item ToggleClearLine
When set, the clear-line flag causes new lines and arcs to have their
``clear polygons'' flag set, so they won't be electrically connected
to any polygons they overlap.

@item ToggleGrid
Resets the origin of the current grid to be wherever the mouse pointer
is (not where the crosshair currently is).  If you provide two numbers
after this, the origin is set to that coordinate.  The numbers are in
PCB internal units, currently 1/100 mil.

@item Grid
Toggles whether the grid is displayed or not.

@item Pinout
Causes the pinout of the element indicated by the cursor to be
displayed, usually in a separate window.

@item PinOrPadName
Toggles whether the names of pins, pads, or (yes) vias will be
displayed.  If the cursor is over an element, all of its pins and pads
are affected.

@item Scroll <direction>
Scrolls the viewport in the given direction, with 1=down/left, 2=down,
etc, according to the numeric keypad layout.

@end table


@node djopt Action
@subsection djopt
@c key djopt in hid 
@cartouche
@format
djopt(debumpify|unjaggy|simple|vianudge|viatrim|orthopull)
djopt(auto) - all of the above
djopt(miter)@end format
@end cartouche

Perform various optimizations on the current board
@c ./../src/djopt.c 2806

The different types of optimizations change your board in order to
reduce the total trace length and via count.

@table @code

@item debumpify
Looks for U-shaped traces that can be shortened or eliminated.

@item unjaggy
Looks for corners which could be flipped to eliminate one or more
corners (i.e. jaggy lines become simpler).

@item simple
Removing uneeded vias, replacing two or more trace segments in a row
with a single segment.  This is usually performed automatically after
other optimizations.

@item vianudge
Looks for vias where all traces leave in the same direction.  Tries to
move via in that direction to eliminate one of the traces (and thus a
corner).

@item viatrim
Looks for traces that go from via to via, where moving that trace to a
different layer eliminates one or both vias.

@item orthopull
Looks for chains of traces all going in one direction, with more
traces orthagonal on one side than on the other.  Moves the chain in
that direction, causing a net reduction in trace length, possibly
eliminating traces and/or corners.

@item auto
Performs the above options, repeating until no further optimizations
can be made.

@item miter
Replaces 90 degree corners with a pair of 45 degree corners, to reduce
RF losses and trace length.

@end table


@node DRC Action
@subsection DRC
@c key DRC in hid 
@cartouche
@format
DRC()@end format
@end cartouche

Invoke the DRC check.
@c ./../src/action.c 1543

Note that the design rule check uses the current board rule settings,
not the current style settings.


@node DumpLibrary Action
@subsection DumpLibrary
@c key DumpLibrary in hid 
@cartouche
@format
DumpLibrary()@end format
@end cartouche

Display the entire contents of the libraries.
@c ./../src/action.c 1575



@node EnableVendor Action
@subsection EnableVendor
@c key EnableVendor in hid 
@cartouche
@format
EnableVendor()@end format
@end cartouche

Enables automatic drill size mapping.
@c ./../src/vendor.c 142

@cindex vendor map 
@cindex vendor drill table
@findex EnableVendor()

When drill mapping is enabled, new instances of pins and vias will
have their drill holes mapped to one of the allowed drill sizes
specified in the currently loaded vendor drill table.  To enable drill
mapping, a vendor resource file containing a drill table must be
loaded first.


@node ExecuteFile Action
@subsection ExecuteFile
@c key ExecuteFile in hid 
@cartouche
@format
ExecuteFile(filename)@end format
@end cartouche

Run actions from the given file.
@c ./../src/action.c 5157

Lines starting with @code{#} are ignored.


@node Flip Action
@subsection Flip
@c key Flip in hid 
@cartouche
@format
Flip(Object|Selected|SelectedElements)@end format
@end cartouche

Flip an element to the opposite side of the board.
@c ./../src/action.c 1623

Note that the location of the element will be symmetric about the
cursor location; i.e. if the part you are pointing at will still be at
the same spot once the element is on the other side.  When flipping
multiple elements, this retains their positions relative to each
other, not their absolute positions on the board.


@node h Action
@subsection h
@c key h in hid 
@cartouche
@format
h@end format
@end cartouche

Print a help message for commands.
@c ./../src/command.c 72

@colonaction


@node l Action
@subsection l
@c key l in hid 
@cartouche
@format
l [name]@end format
@end cartouche

Loads layout data.
@c ./../src/command.c 99

Loads a new datafile (layout) and, if confirmed, overwrites any
existing unsaved data.  The filename and the searchpath
(@emph{filePath}) are passed to the command defined by
@emph{fileCommand}.  If no filename is specified a file select box
will popup.

@colonaction


@node le Action
@subsection le
@c key le in hid 
@cartouche
@format
le [name]@end format
@end cartouche

Loads an element into the current buffer.
@c ./../src/command.c 143

The filename and the searchpath (@emph{elementPath}) are passed to the
command defined by @emph{elementCommand}.  If no filename is specified
a file select box will popup.

@colonaction


@node LoadFrom Action
@subsection LoadFrom
@c key LoadFrom in hid 
@cartouche
@format
LoadFrom(Layout|LayoutToBuffer|ElementToBuffer|Netlist|Revert,filename)@end format
@end cartouche

Load layout data from a file.
@c ./../src/action.c 4207

This action assumes you know what the filename is.  The various GUIs
should have a similar @code{Load} action where the filename is
optional, and will provide their own file selection mechanism to let
you choose the file name.

@table @code

@item Layout
Loads an entire PCB layout, replacing the current one.

@item LayoutToBuffer
Loads an entire PCB layout to the paste buffer.

@item ElementToBuffer
Loads the given element file into the paste buffer.  Element files
contain only a single @code{Element} definition, such as the
``newlib'' library uses.

@item Netlist
Loads a new netlist, replacing any current netlist.

@item Revert
Re-loads the current layout from its disk file, reverting any changes
you may have made.

@end table


@node LoadVendorFrom Action
@subsection LoadVendorFrom
@c key LoadVendorFrom in hid 
@cartouche
@format
LoadVendorFrom(filename)@end format
@end cartouche

Loads the specified vendor resource file.
@c ./../src/vendor.c 196

@cindex vendor map 
@cindex vendor drill table
@findex LoadVendorFrom()

@table @var
@item filename
Name of the vendor resource file.  If not specified, the user will
be prompted to enter one.
@end table


@node m Action
@subsection m
@c key m in hid 
@cartouche
@format
m [name]@end format
@end cartouche

Loads a layout into the current buffer.
@c ./../src/command.c 186

The filename and the searchpath (@emph{filePath}) are passed to the
command defined by @emph{fileCommand}.
If no filename is specified a file select box will popup.

@colonaction


@node MarkCrosshair Action
@subsection MarkCrosshair
@c key MarkCrosshair in hid 
@cartouche
@format
MarkCrosshair()
MarkCrosshair(Center)@end format
@end cartouche

Set/Reset the Crosshair mark
@c ./../src/action.c 2963

The ``mark'' is a small X-shaped target on the display which is
treated like a second origin (the normal origin is the upper let
corner of the board).  The GUI will display a second set of
coordinates for this mark, which tells you how far you are from it.

If no argument is given, the mark is toggled - disabled if it was
enabled, or enabled at the current cursor position of disabled.  If
the @code{Center} argument is given, the mark is moved to the current
cursor location.


@node Mode Action
@subsection Mode
@c key Mode in hid 
@cartouche
@format
Mode(Arc|Arrow|Copy|InsertPoint|Line|Lock|Move|None|PasteBuffer)
Mode(Polygon|Rectangle|Remove|Rotate|Text|Thermal|Via)
Mode(Notify|Release|Cancel|Stroke)
Mode(Save|Restore)@end format
@end cartouche

Change or use the tool mode.
@c ./../src/action.c 2555

@table @code

@item Arc
@itemx Arrow
@itemx Copy
@itemx InsertPoint
@itemx Line
@itemx Lock
@itemx Move
@itemx None
@itemx PasteBuffer
@itemx Polygon
@itemx Rectangle
@itemx Remove
@itemx Rotate
@itemx Text
@itemx Thermal
@itemx Via
Select the indicated tool.

@item Notify
Called when you press the mouse button, or move the mouse.

@item Release
Called when you release the mouse button.

@item Cancel
Cancels any pending tool activity, allowing you to restart elsewhere.
For example, this allows you to start a new line rather than attach a
line to the previous line.

@item Stroke
If your @code{pcb} was built with libstroke, this invokes the stroke
input method.  If not, this will restart a drawing mode if you were
drawing, else it will select objects.

@item Save
Remembers the current tool.

@item Restore
Restores the tool to the last saved tool.

@end table


@node MoveObject Action
@subsection MoveObject
@c key MoveObject in hid 
@cartouche
@format
MoveObject(X,Y,dim)@end format
@end cartouche

Moves the object under the crosshair.
@c ./../src/action.c 4854

The @code{X} and @code{Y} are treated like @code{delta} is for many
other objects.  For each, if it's prefixed by @code{+} or @code{-},
then that amount is relative.  Otherwise, it's absolute.  Units can be
@code{mil} or @code{mm}; if unspecified, units are PCB's internal
units, currently 1/100 mil.


@node MoveToCurrentLayer Action
@subsection MoveToCurrentLayer
@c key MoveToCurrentLayer in hid 
@cartouche
@format
MoveToCurrentLayer(Object|SelectedObjects)@end format
@end cartouche

Moves objects to the current layer.
@c ./../src/action.c 4896

Note that moving an element from a component layer to a solder layer,
or from solder to component, won't automatically flip it.  Use the
@code{Flip()} action to do that.


@node Netlist Action
@subsection Netlist
@c key Netlist in hid 
@cartouche
@format
Net(find|select|rats|norats[,net[,pin]])@end format
@end cartouche

Perform various actions on netlists.
@c ./../src/netlist.c 145

Each of these actions apply to a specified set of nets.  @var{net} and
@var{pin} are patterns which match one or more nets or pins; these
patterns may be full names or regular expressions.  If an exact match
is found, it is the only match; if no exact match is found,
@emph{then} the pattern is tried as a regular expression.

If neither @var{net} nor @var{pin} are specified, all nets apply.  If
@var{net} is specified but not @var{pin}, all nets matching @var{net}
apply.  If both are specified, nets which match @var{net} and contain
a pin matching @var{pin} apply.

@table @code

@item find
Nets which apply are marked @emph{found} and are drawin in the
@code{connected-color} color.

@item select
Nets which apply are selected.

@item rats
Nets which apply are marked as available for the rats nest.

@item norats
Nets which apply are marked as not available for the rats nest.

@end table


@node New Action
@subsection New
@c key New in hid 
@cartouche
@format
New()@end format
@end cartouche

Starts a new layout.
@c ./../src/action.c 4345


@node OptAutoOnly Action
@subsection OptAutoOnly
@c key OptAutoOnly in hid 
@cartouche
@format
OptAutoOnly()@end format
@end cartouche

Toggles the optimize-only-autorouted flag.
@c ./../src/djopt.c 123

The original purpose of the trace optimizer was to clean up the traces
created by the various autorouters that have been used with PCB.  When
a board has a mix of autorouted and carefully hand-routed traces, you
don't normally want the optimizer to move your hand-routed traces.
But, sometimes you do.  By default, the optimizer only optimizes
autorouted traces.  This action toggles that setting, so that you can
optimize hand-routed traces also.


@node PasteBuffer Action
@subsection PasteBuffer
@c key PasteBuffer in hid 
@cartouche
@format
PasteBuffer(AddSelected|Clear|1..MAX_BUFFER)
PasteBuffer(Rotate, 1..3)
PasteBuffer(Convert|Save|Restore|Mirror)
PasteBuffer(ToLayout, X, Y, units)@end format
@end cartouche

Various operations on the paste buffer.
@c ./../src/action.c 4427

There are a number of paste buffers; the actual limit is a
compile-time constant @code{MAX_BUFFER} in @file{globalconst.h}.  It
is currently @code{5}.  One of these is the ``current'' paste buffer,
often referred to as ``the'' paste buffer.

@table @code

@item AddSelected
Copies the selected objects to the current paste buffer.

@item Clear
Remove all objects from the current paste buffer.

@item Convert
Convert the current paste buffer to an element.  Vias are converted to
pins, lines are converted to pads.

@item Restore
Convert any elements in the paste buffer back to vias and lines.

@item Mirror
Flip all objects in the paste buffer vertically (up/down flip).  To mirror
horizonally, combine this with rotations.

@item Rotate
Rotates the current buffer.  The number to pass is 1..3, where 1 means
90 degrees counter clockwise, 2 means 180 degrees, and 3 means 90
degrees clockwise (270 CCW).

@item Save
Saves any elements in the current buffer to the indicated file.

@item ToLayout
Pastes any elements in the current buffer to the indicated X, Y
coordinates in the layout.  The @code{X} and @code{Y} are treated like
@code{delta} is for many other objects.  For each, if it's prefixed by
@code{+} or @code{-}, then that amount is relative to the last
location.  Otherwise, it's absolute.  Units can be
@code{mil} or @code{mm}; if unspecified, units are PCB's internal
units, currently 1/100 mil.


@item 1..MAX_BUFFER
Selects the given buffer to be the current paste buffer.

@end table


@node Polygon Action
@subsection Polygon
@c key Polygon in hid 
@cartouche
@format
Polygon(Close|PreviousPoint)@end format
@end cartouche

Some polygon related stuff.
@c ./../src/action.c 4740

Polygons need a special action routine to make life easier.

@table @code

@item Close
Creates the final segment of the polygon.  This may fail if clipping
to 45 degree lines is switched on, in which case a warning is issued.

@item PreviousPoint
Resets the newly entered corner to the previous one. The Undo action
will call Polygon(PreviousPoint) when appropriate to do so.

@end table


@node Puller Action
@subsection Puller
@c key Puller in hid 
@cartouche
@format
Puller()@end format
@end cartouche

Pull an arc-line junction tight.
@c ./../src/puller.c 228

The @code{Puller()} action is a special-purpose optimization.  When
invoked while the crosshair is over the junction of an arc and a line,
it will adjust the arc's angle and the connecting line's enpoint such
that the line intersects the arc at a tangent.  In the example below,
the left side is ``before'' with the black target marking where to put
the crosshair:

@center @image{puller,,,Example of how puller works,png}

The right side is ``after'' with the black target marking where the
arc-line intersection was moved to.


@node q Action
@subsection q
@c key q in hid 
@cartouche
@format
q@end format
@end cartouche

Quits the application after confirming.
@c ./../src/command.c 228

Note that this command doesn't save your layout.

@colonaction


@node q! Action
@subsection q!
@c key q! in hid 
@cartouche
@format
q!@end format
@end cartouche

Quits the application without confirming.
@c ./../src/command.c 242

Note that this command neither saves your data nor prompts for
confirmation.

@colonaction


@node Quit Action
@subsection Quit
@c key Quit in hid 
@cartouche
@format
Quit()@end format
@end cartouche

Quits the application.
@c ./../src/action.c 2001

If you have unsaved changes, you will be prompted to confirm before
quitting.


@node Redo Action
@subsection Redo
@c key Redo in hid 
@cartouche
@format
Redo()@end format
@end cartouche

Redo recent``undo''operations.
@c ./../src/action.c 4706

This routine allows you to recover from the last undo command.  You
might want to do this if you thought that undo was going to revert
something other than what it actually did (in case you are confused
about which operations are un-doable), or if you have been backing up
through a long undo list and over-shoot your stopping point.  Any
change that is made since the undo in question will trim the redo
list.  For example if you add ten lines, then undo three of them you
could use redo to put them back, but if you move a line on the board
before performing the redo, you will lose the ability to "redo" the
three "undone" lines.


@node RemoveSelected Action
@subsection RemoveSelected
@c key RemoveSelected in hid 
@cartouche
@format
RemoveSelected()@end format
@end cartouche

Removes any selected objects.
@c ./../src/action.c 2693


@node Report Action
@subsection Report
@c key Report in hid 
@cartouche
@format
Report(Object|DrillReport|FoundPins)@end format
@end cartouche

Produce various report.
@c ./../src/report.c 525

@table @code

@item Object
The object under the crosshair will be reported, describing various
aspects of the object.

@item DrillReport
A report summarizing the number of drill sizes used, and how many of
each, will be produced.

@item FoundPins
A report listing all pins and pads which are marked as ``found'' will
be produced.

@end table


@node ReportDialog Action
@subsection ReportDialog
@c key ReportDialog in hid 
@cartouche
@format
ReportDialog()@end format
@end cartouche

Report on the object under the crosshair
@c ./../src/report.c 108

This is a shortcut for @code{Report(Object)}.


@node RipUp Action
@subsection RipUp
@c key RipUp in hid 
@cartouche
@format
RipUp(All|Selected|Element)@end format
@end cartouche

Ripup auto-routed tracks, or convert an element to parts.
@c ./../src/action.c 2711

@table @code

@item All
Removes all lines and vias which were created by the autorouter.

@item Selected
Removes all selected lines and vias which were created by the
autorouter.

@item Element
Converts the element under the cursor to parts (vias and lines).  Note
that this uses the highest numbered paste buffer.

@end table


@node rn Action
@subsection rn
@c key rn in hid 
@cartouche
@format
rn [name]@end format
@end cartouche

Reads netlist.
@c ./../src/command.c 257

If no filename is given a file select box will pop up.  The file is
read via the command defined by the @emph{RatCommand} resource. The
command must send its output to @emph{stdout}.

Netlists are used for generating rat's nests (see @ref{Rats Nest}) and
for verifying the board layout (which is also accomplished by the
@emph{Ratsnest} command).

@colonaction


@node RouteStyle Action
@subsection RouteStyle
@c key RouteStyle in hid 
@cartouche
@format
RouteStyle(1|2|3|4)@end format
@end cartouche

Copies the indicated routing style into the current sizes.
@c ./../src/action.c 4772


@node s Action
@subsection s
@c key s in hid 
@cartouche
@format
s [name]@end format
@end cartouche

Saves layout data.
@c ./../src/command.c 301

Data and the filename are passed to the command defined by the
resource @emph{saveCommand}. It must read the layout data from
@emph{stdin}.  If no filename is entered, either the last one is used
again or, if it is not available, a file select box will pop up.

@colonaction


@node SaveTo Action
@subsection SaveTo
@c key SaveTo in hid 
@cartouche
@format
SaveTo(Layout|LayoutAs,filename)
SaveTo(AllConnections|AllUnusedPins|ElementConnections,filename)@end format
@end cartouche

Saves data to a file.
@c ./../src/action.c 4125

@table @code

@item Layout
Saves the current layout.

@item LayoutAs
Saves the current layout, and remembers the filename used.

@item AllConnections
Save all connections to a file.

@item AllUnusedPins
List all unused pins to a file.

@item ElementConnections
Save connections to the element at the cursor to a file.

@end table


@node Select Action
@subsection Select
@c key Select in hid 
@cartouche
@format
Select(ToggleObject)
Select(All|Block|Connection)
Select(ElementByName|ObjectByName|PadByName|PinByName)
Select(ElementByName|ObjectByName|PadByName|PinByName, Name)
Select(TextByName|ViaByName)
Select(TextByName|ViaByName, Name)
Select(Convert)@end format
@end cartouche

Toggles or sets the selection
@c ./../src/action.c 3869

@table @code

@item ElementByName
@item ObjectByName
@item PadByName
@item PinByName
@item TextByName
@item ViaByName

These all rely on having a regular expression parser built into
@code{pcb}.  If the name is not specified then the user is prompted
for a pattern, and all objects that match the pattern and are of the
type specified are selected.

@item Object
@item ToggleObject
Selects the object under the cursor.

@item Block
Selects all objects in a rectangle indicated by the cursor.

@item All
Selects all objects on the board.

@item Connection
Selects all connections with the ``found'' flag set.

@item Convert
Converts the selected objects to an element.  This uses the highest
numbered paste buffer.

@end table


@node SetFlag Action
@subsection SetFlag
@c key SetFlag in hid 
@cartouche
@format
SetFlag(Object|Selected|SelectedObjects, flag)
SetFlag(SelectedLines|SelectedPins|SelectedVias, flag)
SetFlag(SelectedPads|SelectedTexts|SelectedNames, flag)
SetFlag(SelectedElements, flag)
flag = square | octagon | thermal | join@end format
@end cartouche

Sets flags on objects.
@c ./../src/action.c 5004

Turns the given flag on, regardless of its previous setting.  See
@code{ChangeFlag}.

@example
SetFlag(SelectedPins,thermal)
@end example


@node SetOctagon Action
@subsection SetOctagon
@c key SetOctagon in hid 
@cartouche
@format
SetOctagon(Object|ToggleObject|SelectedElements|Selected)@end format
@end cartouche

Sets the octagon-flag of objects.
@c ./../src/action.c 3711

@pinshapes


@node SetSame Action
@subsection SetSame
@c key SetSame in hid 
@cartouche
@format
SetSame()@end format
@end cartouche

Sets current layer and sizes to match indicated item.
@c ./../src/action.c 4937

When invoked over any line, arc, polygon, or via, this changes the
current layer to be the layer that item is on, and changes the current
sizes (thickness, keepaway, drill, etc) according to that item.


@node SetSquare Action
@subsection SetSquare
@c key SetSquare in hid 
@cartouche
@format
SetSquare(ToggleObject|SelectedElements|SelectedPins)@end format
@end cartouche

sets the square-flag of objects.
@c ./../src/action.c 3547

Note that @code{Pins} means pins and pads.

@pinshapes


@node SetThermal Action
@subsection SetThermal
@c key SetThermal in hid 
@cartouche
@format
SetThermal(Object|SelectePins|SelectedVias|Selected|SelectedElements)@end format
@end cartouche

Set a thermal (on the current layer) to pins or vias.
@c ./../src/action.c 1725

This adds an electrical connection between the pins or vias, and any
rectangle or polygon on the current layer.


@node SetValue Action
@subsection SetValue
@c key SetValue in hid 
@cartouche
@format
SetValue(Grid|Line|LineSize|Text|TextScale|ViaDrillingHole|Via|ViaSize, delta)@end format
@end cartouche

Change various board-wide values and sizes.
@c ./../src/action.c 1921

@table @code

@item ViaDrillingHole
Changes the diameter of the drill for new vias.

@item Grid
Sets the grid spacing.

@item Line
@item LineSize
Changes the thickness of new lines.

@item Via
@item ViaSize
Changes the diameter of new vias.

@item Text
@item TextScale
Changes the size of new text.

@end table


@node ToggleHideName Action
@subsection ToggleHideName
@c key ToggleHideName in hid 
@cartouche
@format
ToggleHideName(Object|SelectedElements)@end format
@end cartouche

Toggles the visibility of element names.
@c ./../src/action.c 3374

If names are hidden you won't see them on the screen and they will not
appear on the silk layer when you print the layout.


@node ToggleThermal Action
@subsection ToggleThermal
@c key ToggleThermal in hid 
@cartouche
@format
ToggleThermal(Object|SelectePins|SelectedVias|Selected)@end format
@end cartouche

Toggle a thermal (on the current layer) to pins or vias.
@c ./../src/action.c 1672

This changes the electrical connection between the pins or vias, and
any rectangle or polygon on the current layer.


@node ToggleVendor Action
@subsection ToggleVendor
@c key ToggleVendor in hid 
@cartouche
@format
ToggleVendor()@end format
@end cartouche

Toggles the state of automatic drill size mapping.
@c ./../src/vendor.c 124

@cindex vendor map 
@cindex vendor drill table
@findex ToggleVendor()

When drill mapping is enabled, new instances of pins and vias will
have their drill holes mapped to one of the allowed drill sizes
specified in the currently loaded vendor drill table.  To enable drill
mapping, a vendor resource file containing a drill table must be
loaded first.


@node Undo Action
@subsection Undo
@c key Undo in hid 
@cartouche
@format
Undo()
Undo(ClearList)@end format
@end cartouche

Undo recent changes.
@c ./../src/action.c 4554

The unlimited undo feature of @code{Pcb} allows you to recover from
most operations that materially affect you work.  Calling
@code{Undo()} without any parameter recovers from the last (non-undo)
operation. @code{ClearList} is used to release the allocated
memory. @code{ClearList} is called whenever a new layout is started or
loaded. See also @code{Redo} and @code{Atomic}.

Note that undo groups operations by serial number; changes with the
same serial number will be undone (or redone) as a group.  See
@code{Atomic}.


@node UnloadVendor Action
@subsection UnloadVendor
@c key UnloadVendor in hid 
@cartouche
@format
UnloadVendor()@end format
@end cartouche

Unloads the current vendor drill mapping table.
@c ./../src/vendor.c 172

@cindex vendor map 
@cindex vendor drill table
@findex UnloadVendor()


@node Unselect Action
@subsection Unselect
@c key Unselect in hid 
@cartouche
@format
Unselect(All|Block|Connection)
Unselect(ElementByName|ObjectByName|PadByName|PinByName)
Unselect(ElementByName|ObjectByName|PadByName|PinByName, Name)
Unselect(TextByName|ViaByName)
Unselect(TextByName|ViaByName, Name)
@end format
@end cartouche

unselects the object at the pointer location or the specified objects
@c ./../src/action.c 4012

@table @code

@item All
Unselect all objects.

@item Block
Unselect all objects in a rectangle given by the cursor.

@item Connection
Unselect all connections with the ``found'' flag set.

@item ElementByName
@item ObjectByName
@item PadByName
@item PinByName
@item TextByName
@item ViaByName

These all rely on having a regular expression parser built into
@code{pcb}.  If the name is not specified then the user is prompted
for a pattern, and all objects that match the pattern and are of the
type specified are unselected.


@end table


@node w Action
@subsection w
@c key w in hid 
@cartouche
@format
w [name]@end format
@end cartouche

Saves layout data.
@c ./../src/command.c 307

This commands has been added for the convenience of @code{vi} users
and has the same functionality as @code{s}.

@colonaction


@node wq Action
@subsection wq
@c key wq in hid 
@cartouche
@format
wq@end format
@end cartouche

Saves the layout data and quits.
@c ./../src/command.c 352

This command has been added for the convenience of @code{vi} users and
has the same functionality as @code{s} combined with @code{q}.

@colonaction


@node common actions
@section common actions
@c ./../src/hid/common/actions.c 329

@macro hidaction

This is one of a number of actions which are part of the HID
interface.  The core functions use these actions to tell the current
GUI when to change the presented information in response to changes
that the GUI may not know about.  The user normally does not invoke
these directly.

@end macro

@menu
* LayerGroupsChanged Action:: Tells the GUI that the layer groups have changed.
* LibraryChanged Action:: Tells the GUI that the libraries have changed.
* NetlistChanged Action:: Tells the GUI that the netlist has changed.
* PCBChanged Action:: Tells the GUI that the whole PCB has changed.
* RouteStylesChanged Action:: Tells the GUI that the routing styles have changed.
@end menu
@node LayerGroupsChanged Action
@subsection LayerGroupsChanged
@c key LayerGroupsChanged in hid common
@cartouche
@format
LayerGroupsChanged()@end format
@end cartouche

Tells the GUI that the layer groups have changed.
@c ./../src/hid/common/actions.c 350

@hidaction


@node LibraryChanged Action
@subsection LibraryChanged
@c key LibraryChanged in hid common
@cartouche
@format
LibraryChanged()@end format
@end cartouche

Tells the GUI that the libraries have changed.
@c ./../src/hid/common/actions.c 355

@hidaction


@node NetlistChanged Action
@subsection NetlistChanged
@c key NetlistChanged in hid common
@cartouche
@format
NetlistChanged()@end format
@end cartouche

Tells the GUI that the netlist has changed.
@c ./../src/hid/common/actions.c 345

@hidaction


@node PCBChanged Action
@subsection PCBChanged
@c key PCBChanged in hid common
@cartouche
@format
PCBChanged()@end format
@end cartouche

Tells the GUI that the whole PCB has changed.
@c ./../src/hid/common/actions.c 335

@hidaction


@node RouteStylesChanged Action
@subsection RouteStylesChanged
@c key RouteStylesChanged in hid common
@cartouche
@format
RouteStylesChanged()@end format
@end cartouche

Tells the GUI that the routing styles have changed.
@c ./../src/hid/common/actions.c 340

@hidaction


@node gtk actions
@section gtk actions
@menu
* gtk About Action:: Tell the user about this version of PCB.
* gtk Zoom Action:: this is the gtk zoom
@end menu
@node gtk About Action
@subsection gtk About
@c key gtk About in hid gtk
@cartouche
@format
About()@end format
@end cartouche

Tell the user about this version of PCB.
@c ./../src/hid/gtk/gtkhid-main.c 1334

This just pops up a dialog telling the user which version of
@code{pcb} they're running.


@node gtk Zoom Action
@subsection gtk Zoom
@c key gtk Zoom in hid gtk
@cartouche
@format
Zoom(gtk)@end format
@end cartouche

this is the gtk zoom
@c ./../src/hid/gtk/gtkhid-main.c 49

This is for the gtk zoom.


@node lesstif actions
@section lesstif actions
@menu
* lesstif About Action:: Tell the user about this version of PCB.
* lesstif Zoom Action:: this is the lesstif zoom
@end menu
@node lesstif About Action
@subsection lesstif About
@c key lesstif About in hid lesstif
@cartouche
@format
About()@end format
@end cartouche

Tell the user about this version of PCB.
@c ./../src/hid/lesstif/dialogs.c 737

This just pops up a dialog telling the user which version of
@code{pcb} they're running.


@node lesstif Zoom Action
@subsection lesstif Zoom
@c key lesstif Zoom in hid lesstif
@cartouche
@format
Zoom(lesstif)@end format
@end cartouche

this is the lesstif zoom
@c ./../src/hid/lesstif/main.c 329

This is for the lesstif zoom.


