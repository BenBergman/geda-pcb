#!/bin/sh
#

This documents what is done to create a pcb release.  The releases now
are done by branching the sources, fixing up the release version number
in the branch and then tagging the release branch sources.  The motivation
for a branch rather than a tag is to make it easier to deal with setting
the snapshot version number in the documentation, distfile, and the
about dialog box.  

NOTE:  Use the DISTCHECK_CONFIGURE_FLAGS to be able to run the distcheck
target with lesstif as the built gui with
DISTCHECK_CONFIGURE_FLAGS="--with-gui=lesstif" if you want to also verify
that distcheck works with the lesstif HID.

FIXME -- we need to build where we explicitly add all the export HID's
         and where we explicitly build with each of the gui HID's (including
	 batch).  This is needed to catch the case of missing src/hid/*/hid.conf
	 files.

After following the steps below,
upload the 'pcb-$VERSION.tar.gz' file to the sourceforge file release system


To make a pcb release do the following:

=)      Make sure you have a clean checkout of master/origin

=)	# make sure it makes distfiles ok: (have to build before doing distcheck so
	pcb gets built so it can create some of the images in the doc directory)

	# clean up, and build with the GTK HID
	gmake distclean
	./autogen.sh
	./configure --disable-update-desktop-database --disable-update-mime-database
	gmake
	gmake distcheck

	# check the build with lesstif HID.  The /usr/pkg parts should be replaced with
	# whatever flags (if any) are needed to find lesstif on your system.
	setenv DISTCHECK_CONFIGURE_FLAGS '--with-gui=lesstif CPPFLAGS=-I/usr/pkg/include CFLAGS=-I/usr/pkg/include LDFLAGS="-L/usr/pkg/lib -R/usr/pkg/lib"'
	gmake distcheck

	# check the build with the batch HID
	setenv DISTCHECK_CONFIGURE_FLAGS '--with-gui=batch'
	gmake distcheck
	unsetenv DISTCHECK_CONFIGURE_FLAGS

=)	commit and push any changes which were needed to fix 'distcheck' problems

=)	update the ChangeLog with './utils/git2cl > ChangeLog'

=)	update the NEWS file with some sort of release notes
	summary.  You can find the number of commits with something like

	    awk '/^2008-11-28/ {print "Changes: " c ; exit} /^20[01][0-9]/ {c++}' ChangeLog

	Commit and push NEWS and ChangeLog.

=)	if this is a major release, then branch:

	1. Create the release branch
		git branch pcb-20091101

	3. FIX_ME [fix up this step.  what shall we do with the version
	   on the trunk?  We are about to run out of letters!] 
	   On the trunk, update configure.ac to update the version
		for example 1.99x after releasing 1.99w
		git checkout master
		vi configure.ac
		git commit configure.ac

	4. On the release branch, update configure.ac to update the version
		for example 20091101_ALPHA.  Now pre-release snapshots can be made.
		git checkout pcb-20091101

	5. If desired tag an alpha release:
		git checkout pcb-20091101
		./autogen.sh
		git tag -a pcb-20091101-ALPHA
		git checkout pcb-20091101-ALPHA
		./autogen.sh && ./configure --enable-maintainer-mode \
			--disable-update-desktop-database \
			--disable-update-mime-database && \
			gmake && gmake distcheck

	6. When the release branch is ready to go,  update configure.ac to
	   set the final release version.  Then tag the release.
		git checkout pcb-20091101
		vi configure.ac
		git commit configure.ac
		./autogen.sh
		git commit -a
		git tag -a pcb-20091101-RELEASE
		git checkout pcb-20091101-RELEASE
		./autogen.sh && ./configure --enable-maintainer-mode \
			--disable-update-desktop-database \
			--disable-update-mime-database && \
			gmake clean && gmake && gmake distcheck
	
	7. Create checksums

		openssl sha1 pcb-20091101.tar.gz > pcb-20091101.cksum
		openssl md5 pcb-20091101.tar.gz >> pcb-20091101.cksum
		openssl rmd160 pcb-20091101.tar.gz >> pcb-20091101.cksum
		echo "File size (bytes):" >> pcb-20091101.cksum
		wc -c pcb-20091101.tar.gz >> pcb-20091101.cksum

	8. Create a new file release for pcb with a release name of
	   "pcb-20091101" (for pcb-20091101).

	   https://sourceforge.net/projects/pcb  (you must be logged in to sourceforge)

	   Pick Admin->File Releases

	   Next to the "gerbv" package, click "Add Release"

           In the "Step 1:  Edit Existing Release" section, paste in the section of the NEWS
	   for this version.  Check the "Preserve my pre-formatted text" radio button and click
	   "Submit/Refresh".

           In the "Step 2: Add Files To This Release" section follow the "upload new files" link
	   and then in the next page the "Web Upload" link.  You will have to log in to
	   sourceforge again.

           Upload the .tar.gz, .cksum, and if you built one, the windows installer.

           Once you have completed the file uploads return to the edit releases page, check
	   the radio buttons next to the uploaded files and click the "Add Files..." button.

           In the "Step 3:  Edit Files in this Release" section, set the following:
		For file types:
			.tar.gz  -  any / source .gz
			.cksum   -  Platform Independent / Other Source File
			.exe     -  i386 / .exe (32-bit Windows)

           You will have to click "update" for each file as you go.

           In the "Step 4:  Email Release Notice" section, check the "I'm sure" 
	   radio button and click the "Send Notice" button.
        
	 9. Have a project admin go to the Admin->File Releases page and then
	    follow the "Create/Edit Download page" to change the default download
	    file to the new release.

	10. Return to your regularly scheduled trunk development
		git checkout master

=) 	if this is a patch release, then simply make desired changes to the branch, and
		git checkout pcb-20091101
		# make changes
		./autogen.sh
		git commit
		git tag -a pcb-20091101-PATCH001

=)	gmake distclean ; ./autogen.sh &&./configure && gmake distcheck

